(1)
1. 스택 공간을 생성한다.
2. 문자열의 문자가 '(', 또는 '[', 또는 '{'일 경우 이를 스택에 push한다.
3. 문자열의 문자가 ')', 또는 ']', 또는 '}'일 경우 스택에 있는 문자를 pop한다.

정상인 경우
- 문자열 탐색이 종료되었을 때, 스택이 비어있는 경우

오류가 발생하는 경우
- 문자열 탐색이 종료되었을 때, 스택이 비어있지 않는 경우 (열린 괄호가 닫는 괄호보다 많은 상황)
- 닫는 괄호를 만나 스택에서 pop 하려고 하였으나, 스택이 비어있는 경우 (닫는 괄호가 열린 괄호보다 많은 상황)

```
strs = 'if ( ( i== 0 ) && ( j == 0)))'
stack = [] # 괄호 검사를 위한 빈 스택 공간 생성

for token in strs:
    print(stack)
    if token.isdecimal():
        continue
    if token == '(' or token == '[' or token == '{':
        stack.append(token)
    elif token == ')' or token == ']' or token == '}':
        if not stack: # 스택이 비어있다면
            print('Error') # 에러 출력
            break # 종료
        stack.pop() # 스택이 비어있지 않은 경우에만 pop
else:
    if stack != []: # 탐색이 종료되었음에도 스택이 비어있지 않다면
        print('Error')
    else:
        print('Correct') #for문이 중단 없이 완료되면 괄호는 정상
```

(2) ( ( ) ( ) ) )
[ ( ] # 여는 괄호를 만나 push
[ (, ( ] # 여는 괄호를 만나 push
[ ( ] # 닫는 괄호를 만나 pop
[ (, ( ] # 여는 괄호를 만나 push
[ ( ] # 닫는 괄호를 만나 pop
[ ] # 닫는 괄호를 만나 pop
[ ] # 닫는 괄호를 만나서 pop하려고 하였으나 스택이 비어있으므로 Error, 즉 닫는 괄호가 열린 괄호보다 많기 때문에 발생한 오류이다.