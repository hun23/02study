'''
나삼성씨가 새로 나온 게임을 구입하였다. 이 게임은 아래와 같이 가로, 세로 N*N 크기의 지도에 주어진 사과를 순서대로 먹는 게임이다.
사과는 번호 순서에 따라 차례대로 지도에 나타난다. 예를 들어 아래와 같이 지도가 주어졌다고 가정하자.
1번 사과를 먹으면 2번 사과가 나타나고, 2번 사과를 먹으면 3번 사과가 나타난다.
따라서 2번 사과를 1번 사과보다 먼저 먹는 것은 불가능하다. 마찬가지로 3번 사과를 1, 2번 사과보다 먼저 먹을 수 없다.

플레이어의 시작 위치는 좌측 상단으로 고정되어있고, 게임을 시작하면 자동으로 화살표 방향으로 전진한다.
뒤로 이동은 불가능하기 때문에 옆에 있는 사과를 먹기 위해서는 회전해야 한다.
그런데 키보드의 방향키 하나가 고장이 나서 오직 오른쪽으로만 회전이 가능하다.

키보드의 오른쪽 방향키를 누를 때 마다 오른쪽으로 90도씩 회전한다.
한 자리에서 이동하지 않으면 오직 한번만 회전이 가능하다. 즉, 제자리에서 여러 번 회전은 불가능하다.
사과를 먹음과 동시에 회전하는 것도 가능하다. 지도 상에 모든 사과를 먹으면 게임이 종료된다.
회전 횟수를 최소화하여 순서대로 모든 사과를 먹으려면, 최소 몇 번의 회전이 필요한지 구하는 프로그램을 작성하라.

예제에서 주어진 순서대로 사과를 먹으려면 [그림 2]와 같이 최소 7번의 회전이 필요하다.

[제약사항]
1. 지도의 한 변의 크기 N은 5이상 10 이하의 정수이다. (5 ≤ N ≤ 10)
2. 사과의 개수 M은 2이상 10 이하의 정수이다. (2 ≤ M ≤ 10)
3. 새로운 사과가 나타날 때 바로 직전 사과와 동일한 열/행에 나타나지 않는다. (그림3의 회색 영역 참조)
4. 지도의 가장자리 영역에는 사과가 나타나지 않는다. (그림4의 회색 영역 참고)
'''

import sys
sys.stdin = open('input1.txt', 'r')

T = int(input())

for test_case in range(1, T+1):

    N = int(input())
    arr = [list(map(int, input().split())) for _ in range(N)]

    ans = []

# (1) N번째 사과 위치 찾기
    dict_ = {}
    num = 1
    while sum(arr, []) != [0]*N*N: # arr에 0만 남을 때까지
        done = False
        for i in range(N):
            for j in range(N):
                if arr[i][j] == num:
                    dict_[num] = [i, j]
                    arr[i][j] = 0
                    num += 1
                    done = True
                    break
            if done:
                break

# (2) 사과 찾으러 가즈아
    # dir == [1, 0] # 아래 방향
    # dir == [0, -1] # 좌측 방향
    # dir == [-1, 0] # 위쪽 방향
    # dir == [0, 1] # 우측 방향

    cnt = 1
    dir = [1, 0]
    for i in range(len(dict_)-1):
        a0 = list(dict_.values())[i][0]
        b0 = list(dict_.values())[i + 1][0]
        a1 = list(dict_.values())[i][-1]
        b1 = list(dict_.values())[i + 1][-1]

        if dir == [1, 0]: # 아래 방향이고
            if a0 < b0 and a1 > b1:
                cnt += 2
                dir = [0, -1] # 좌측 방향으로 변경
            elif a0 > b0 and a1 > b1:
                cnt += 2
                dir = [-1, 0] # 위쪽 방향으로 변경
            else:
                cnt += 3
                dir = [0, 1] # 우측 방향으로 변경

        elif dir == [-1, 0]: # 위쪽 방향이고
            if a0 > b0 and a1 < b1:
                cnt += 2
                dir = [0, 1] # 우측 방향으로 변경
            elif a0 < b0 and a1 < b1:
                cnt += 2
                dir = [1, 0] # 아래 방향으로 변경
            else:
                cnt += 3
                dir = [0, -1] # 좌측 방향으로 변경

        elif dir == [0, 1]: # 우측 방향이고
            if a0 > b0 and a1 > b1:
                cnt += 3
                dir = [-1, 0] # 위쪽 방향으로 변경
            elif a0 > b0 and a1 < b1:
                cnt += 3
            else:
                cnt += 2
                dir = [0, -1] # 좌측 방향으로 변경

        elif dir == [0, -1]: # 좌측 방향이고
            if a0 > b0 and a1 > b1:
                cnt += 2
                dir = [-1, 0] # 위쪽 방향으로 변경
            elif a0 > b0 and a1 < b1:
                cnt += 2
                dir = [0, 1] # 우측 방향으로 변경
            else:
                cnt += 3
                dir = [1, 0] # 아래 방향으로 변경

    print(f'#{test_case} {cnt}')